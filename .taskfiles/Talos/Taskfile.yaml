---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_DIR: "{{.KUBERNETES_DIR}}/talos"
  TALHELPER_SECRET_FILE: "{{.TALOS_DIR}}/talhelper.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.TALOS_DIR}}/talconfig.yaml"

env:
  TALOSCONFIG: "{{.TALOS_DIR}}/clusterconfig/talosconfig"

tasks:

  gensecret:
    desc: Generate talos secret
    dir: "{{.TALOS_DIR}}"
    cmds:
      - talhelper gensecret > {{.TALHELPER_SECRET_FILE}}
      - task: :sops:.encrypt-file
        vars:
          file: "{{.TALHELPER_SECRET_FILE}}"
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
    status:
      - test -f "{{.TALHELPER_SECRET_FILE}}"

  genconfig:
    desc: Generate talos config
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper genconfig
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  apply:
    desc: Apply talos config on a node
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  bootstrap:
    desc: Bootstrap the talos cluster
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand bootstrap | bash
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  kubeconfig:
    desc: Generate talos kubeconfig
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand kubeconfig --extra-flags "--force" | bash

  apply-extras:
    desc: Apply extras
    dir: "{{.TALOS_DIR}}"
    cmds:
      - kubectl --kubeconfig {{.KUBECONFIG_FILE}} kustomize --enable-helm ./cilium | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename -
      - kubectl --kubeconfig {{.KUBECONFIG_FILE}} kustomize --enable-helm ./kubelet-csr-approver | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename -
    preconditions:
      - { msg: "Missing kubeconfig", sh: "test -f {{.KUBECONFIG_FILE}}" }

  deploy:
    desc: Deploys your Talos cluster in one command
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: gensecret
      - task: genconfig
      - task: apply
      - sleep 30
      - echo "It might take some time to install Talos on your nodes and possibly reboot. Please ignore the errors and be patient"
      - until talhelper gencommand bootstrap | bash ; do sleep 5; done
      - sleep 5
      - task: kubeconfig
      - sleep 30
      - echo "It might take some time for the controlplane to come up. Please ignore the errors and be patient"
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=600s ; do sleep 5; done
      - task: apply-extras
      - until kubectl wait --for=condition=Ready nodes --all --timeout=600s ; do sleep 1; done
      - talosctl health --server=false
      - echo "All good to go!"

  soft-nuke:
    desc: Resets nodes back to maintenance mode so you can re-deploy again straight after
    prompt: "This will destroy your cluster and reset the nodes back to maintenance mode. Are you sure?"
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash

  hard-nuke:
    desc: Resets nodes back completely and reboots them
    prompt: "This will destroy your cluster and reset the nodes. Are you sure?"
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --graceful=false --wait=false" | bash

  upgrade-talos:
    desc: Upgrade talos on a node
    cmd: talosctl --nodes {{.node}} upgrade --image {{.image}} --preserve=true --reboot-mode=default
    requires:
      vars: ["node", "image"]
    preconditions:
      - { msg: "Node not found", sh: "talosctl --nodes {{.node}} get machineconfig" }

  upgrade-k8s:
    desc: Upgrade k8s on a node
    cmd: talosctl --nodes {{.node}} upgrade-k8s --to {{.to}}
    requires:
      vars: ["node", "to"]
    preconditions:
      - { msg: "Node not found", sh: "talosctl --nodes {{.node}} get machineconfig" }

  .reset:
    internal: true
    cmd: rm -rf {{.TALOS_DIR}}

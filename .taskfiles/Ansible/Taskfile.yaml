---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

x-preconditions: &preconditions
  - &ansibleInventoryFileCheck
    sh: test -f {{.ANSIBLE_INVENTORY_FILE}}
    msg: Missing {{.ANSIBLE_INVENTORY_FILE}}
  - &ansibleLintFileCheck
    sh: test -f {{.ANSIBLE_LINT_FILE}}
    msg: Missing {{.ANSIBLE_LINT_FILE}}
  - &ansibleRequirementsFileCheck
    sh: test -f {{.ANSIBLE_REQUIREMENTS_FILE}}
    msg: Missing {{.ANSIBLE_REQUIREMENTS_FILE}}
  - &pipRequirementsFileCheck
    sh: test -f {{.PIP_REQUIREMENTS_FILE}}
    msg: Missing {{.PIP_REQUIREMENTS_FILE}}
  - &pythonBinCheck
    sh: command -v {{.PYTHON_BIN}}
    msg: Missing {{.PYTHON_BIN}}
  - &pythonVersionCheck
    sh: true && {{.PYTHON_BIN}} {{.BOOTSTRAP_DIR}}/scripts/py_version_check.py
    msg: Your system Python version must be 3.11.0 or greater
  - &venvCheck
    sh: test -d {{.ROOT_DIR}}/.venv
    msg: Missing virtual environment. Run `task ansible:deps` to create it

vars:
  ANSIBLE_LINT_FILE: "{{.ANSIBLE_DIR}}/.ansible-lint"
  ANSIBLE_INVENTORY_FILE: "{{.ANSIBLE_DIR}}/inventory/hosts.yaml"
  ANSIBLE_REQUIREMENTS_FILE: "{{.ROOT_DIR}}/requirements.yaml"
  PIP_REQUIREMENTS_FILE: "{{.ROOT_DIR}}/requirements.txt"

env:
  PATH: "{{.ROOT_DIR}}/.venv/bin:$PATH"
  VIRTUAL_ENV: "{{.ROOT_DIR}}/.venv"
  ANSIBLE_COLLECTIONS_PATH: "{{.ROOT_DIR}}/.venv/galaxy"
  ANSIBLE_ROLES_PATH: "{{.ROOT_DIR}}/.venv/galaxy/ansible_roles"
  ANSIBLE_VARS_ENABLED: "host_group_vars"
  ANSIBLE_LOCALHOST_WARNING: "False"
  ANSIBLE_INVENTORY_UNPARSED_WARNING: "False"

tasks:

  deps:
    desc: Set up Ansible dependencies for the environment
    cmds:
      - task: .venv
        vars:
          force: '{{.force | default "true"}}'

  run:
    desc: Run an Ansible playbook for configuring a cluster
    summary: |
      Args:
        playbook: Playbook to run (required)
    prompt: Run Ansible playbook '{{.playbook}}'... continue?
    deps: ["deps"]
    cmd: .venv/bin/ansible-playbook --inventory {{.ANSIBLE_INVENTORY_FILE}} {{.ANSIBLE_DIR}}/playbooks/{{.playbook}}.yaml {{.CLI_ARGS}}
    preconditions:
      - sh: test -n {{.playbook}}
        msg: Missing required argument (playbook)
      - sh: test -f {{.ANSIBLE_DIR}}/playbooks/{{.playbook}}.yaml
        msg: Missing {{.ANSIBLE_DIR}}/playbooks/{{.playbook}}.yaml
      - *ansibleInventoryFileCheck
      - *ansibleLintFileCheck
      - *ansibleRequirementsFileCheck
      - *pipRequirementsFileCheck
      - *pythonBinCheck
      - *pythonVersionCheck
      - *venvCheck

  poweroff:
    desc: Shutdown all the k8s nodes
    deps: ["deps"]
    cmd: .venv/bin/ansible kubernetes --inventory {{.ANSIBLE_INVENTORY_FILE}} -a '/usr/bin/systemctl poweroff' --become
    preconditions: *preconditions

  list:
    desc: List all the hosts
    deps: ["deps"]
    cmd: .venv/bin/ansible kubernetes --inventory {{.ANSIBLE_INVENTORY_FILE}} --list-hosts
    preconditions: *preconditions

  ping:
    desc: Ping all the hosts
    deps: ["deps"]
    cmd: .venv/bin/ansible kubernetes --inventory {{.ANSIBLE_INVENTORY_FILE}} --one-line -m 'ping'
    preconditions: *preconditions

  uptime:
    desc: Uptime of all the hosts
    deps: ["deps"]
    cmd: .venv/bin/ansible kubernetes --inventory {{.ANSIBLE_INVENTORY_FILE}} --one-line -a 'uptime'
    preconditions: *preconditions

  lint:
    desc: Lint Ansible
    deps: ["deps"]
    cmd: ./.venv/bin/ansible-lint --config-file {{.ANSIBLE_LINT_FILE}} {{.ANSIBLE_DIR}}/**/*.yaml
    preconditions: *preconditions

  .venv:
    internal: true
    cmds:
      - "{{.PYTHON_BIN}} -m venv {{.ROOT_DIR}}/.venv"
      - .venv/bin/python3 -m pip install --upgrade pip setuptools wheel
      - .venv/bin/python3 -m pip install --upgrade --requirement "{{.PIP_REQUIREMENTS_FILE}}"
      - .venv/bin/ansible-galaxy install --role-file "{{.ANSIBLE_REQUIREMENTS_FILE}}" {{if eq .force "true"}}--force{{end}}
    sources:
      - "{{.PIP_REQUIREMENTS_FILE}}"
      - "{{.ANSIBLE_REQUIREMENTS_FILE}}"
    generates:
      - "{{.ROOT_DIR}}/.venv/pyvenv.cfg"
    preconditions:
      - *ansibleRequirementsFileCheck
      - *pipRequirementsFileCheck
      - *pythonBinCheck
      - *pythonVersionCheck
    vars:
      force: '{{.force | default "true"}}'

---
# IMPORTANT: ONLY MAKE EDITS BELOW the 'data:' section
apiVersion: v1
kind: Secret
metadata:
  name: cluster-secrets
  namespace: flux-system
data:
  # (REQUIRED) The network CIDR your nodes are on (e.g. 192.168.1.0/24)
  NODE_CIDR: ""
  # (REQUIRED) The default gateway for the nodes. (e.g. 192.168.1.1)
  NODE_DEFAULT_GATEWAY: ""
  # (OPTIONAL) Attach a vlan tag to the Talos nodes, leave blank if you tag
  #   ports on your switch or do not use VLANs at all.
  #   Ref: https://www.talos.dev/latest/advanced/advanced-networking/#vlans
  NODE_VLAN_TAG: ""
  # (OPTIONAL) The pod CIDR for the cluster, this must NOT overlap with any existing networks and is usually a /16 (64K IPs).
  # (DEFAULT: 10.42.0.0/16)
  CLUSTER_POD_CIDR: "10.42.0.0/16"
  # (OPTIONAL) The service CIDR for the cluster, this must NOT overlap with any existing networks and is usually a /16 (64K IPs).
  # (DEFAULT: 10.43.0.0/16)
  CLUSTER_SVC_CIDR: "10.43.0.0/16"
  # (OPTIONAL) The DNS servers to use for the cluster nodes
  # (DEFAULT: 1.1.1.1,1.0.0.1)
  CLUSTER_DNS_SERVERS: "1.1.1.1,1.0.0.1"
  # (OPTIONAL) The NTP servers to use for the cluster nodes
  # (DEFAULT: 162.159.200.1,162.159.200.123)
  CLUSTER_NTP_SERVERS: "162.159.200.1,162.159.200.123"
  # (REQUIRED) The IP address of the Kube API, choose an available IP in your nodes host network that is NOT being used.
  CLUSTER_API_ADDR: ""
  # (OPTIONAL) Add additional SANs to the Kube API cert, this is useful if you want to call the Kube API by hostname rather than IP
  CLUSTER_API_TLS_SANS: ""
  # (REQUIRED) GitHub repository (e.g. onedr0p/cluster-template)
  GITHUB_REPOSITORY: ""
  # (OPTIONAL) GitHub repository branch
  # (DEFAULT: main)
  GITHUB_BRANCH: "main"
  # (REQUIRED) Token for GitHub push-based sync
  GITHUB_TOKEN: ""
  # (OPTIONAL) Use a private GitHub repository
  # (DEFAULT: false)
  GITHUB_PRIVATE: "false"
  # (REQUIRED) Cloudflare Domain name
  CLOUDFLARE_DOMAIN: ""
  # (REQUIRED) Cloudflare API Token (NOT API Key)
  #   1. Head over to Cloudflare and create a API Token by going to
  #      https://dash.cloudflare.com/profile/api-tokens
  #   2. Under the `API Tokens` section click the blue `Create Token` button.
  #   3. Click the blue `Use template` button for the `Edit zone DNS` template.
  #   4. Name your token something like `kubernetes`
  #   5. Under `Permissions`, click `+ Add More` and add each permission below:
  #      `Zone - DNS - Edit`
  #      `Account - Cloudflare Tunnel - Read`
  #   6. Limit the permissions to a specific account and zone resources.
  #   7. Click the blue `Continue to Summary` button and then the blue `Create Token` button.
  #   8. Copy the token and paste it below.
  CLOUDFLARE_TOKEN: ""
  # (REQUIRED) Use the ACME production server when requesting the wildcard certificate.
  #   By default the ACME staging server is used. This is to prevent being rate-limited.
  #   Update this option to `production` when you have verified the staging certificate
  #   works and then re-run `task configure` and push your changes to Github.
  CLOUDFLARE_CLUSTER_ISSUER: "staging"
  # (REQUIRED) Provide LAN access to the cluster ingresses for internal ingress classes
  # The Load balancer IP for internal ingress, choose an available IP
  #   in your nodes host network that is NOT being used.
  CLOUDFLARE_INGRESS_ADDR: ""
  # (REQUIRED) Gateway is used for providing DNS to your cluster on LAN
  # The Load balancer IP for k8s_gateway, choose an available IP
  #   in your nodes host network that is NOT being used.
  CLOUDFLARE_DNS_GATEWAY_ADDR: ""
  # (REQUIRED) Options for Cloudflare Tunnel
  #   1. Authenticate cloudflared to your domain with the following command:
  #     > cloudflared tunnel login
  #   2. Create the tunnel with the following command:
  #     > cloudflared tunnel create --credentials-file cloudflared.json k8s
  #   3. The file contents of `cloudflared.json` will be automatically used when running `task configure`
  # (REQUIRED) Provide WAN access to the cluster ingresses for external ingress classes
  # The Load balancer IP for external ingress, choose an available IP
  #   in your nodes host network that is NOT being used.
  CLOUDFLARE_TUNNEL_INGRESS_ADDR: ""
  # (OPTIONAL) Change Cilium load balancer mode
  #   Ref: https://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/
  # (DEFAULT: dsr)
  CILIUM_LOADBALANCER_MODE: "dsr"
  # (OPTIONAL) Use cilium BGP control plane for L3 routing
  #   Needs a BGP capable router setup with the node IPs as peers.
  #   To keep things simple, node network will be used for BGP peering.
  #   Ref: https://docs.cilium.io/en/latest/network/bgp-control-plane/bgp-control-plane/
  # (DEFAULT: false)
  CILIUM_BGP_ENABLED: "false"
  # (REQUIRED) Router IP address - BGP must be configured on this router using FRR or similar
  CILIUM_BGP_ROUTER_ADDR: ""
  # (REQUIRED) Router ASN
  # (DEFAULT: 64513)
  CILIUM_BGP_ROUTER_ASN: "64513"
  # (REQUIRED) Node ASN
  # (DEFAULT: 64514)
  CILIUM_BGP_NODE_ASN: "64514"

#!/usr/bin/env bash

set -euo pipefail

# Log messages with timestamps and function names
function log() {
    echo -e "\033[0;32m[$(date --iso-8601=seconds)] (${FUNCNAME[1]}) $*\033[0m"
}

# Wait for all nodes to be up
function wait_for_nodes() {
    if kubectl wait nodes --for=condition=Ready=True --all --timeout=10s &>/dev/null; then
        log "All nodes are ready. Skipping..."
        return
    fi
    until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m &>/dev/null; do
        log "Waiting for all nodes to be up..."
        sleep 5
    done
}

# Apply Prometheus CRDs
function apply_prometheus_crds() {
    # renovate: datasource=github-releases depName=prometheus-operator/prometheus-operator
    local -r version=v0.80.0

    local -r crds=(
        "alertmanagerconfigs"
        "alertmanagers"
        "podmonitors"
        "probes"
        "prometheusagents"
        "prometheuses"
        "prometheusrules"
        "scrapeconfigs"
        "servicemonitors"
        "thanosrulers"
    )

    for crd in "${crds[@]}"; do
        if kubectl get crd "${crd}.monitoring.coreos.com" &>/dev/null; then
            log "Prometheus CRD '${crd}' is up-to-date. Skipping..."
            continue
        fi
        log "Applying Prometheus CRD '${crd}'..."
        kubectl apply --server-side \
            --filename "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/${version}/example/prometheus-operator-crd/monitoring.coreos.com_${crd}.yaml"
    done
}

# Apply Namespaces
function apply_namespaces() {
    local -r namespaces=(
        "flux-system"
    )

    for namespace in "${namespaces[@]}"; do
        if kubectl get namespace "${namespace}" &>/dev/null; then
            log "Namespace '${namespace}' is up-to-date. Skipping..."
            continue
        fi
        log "Applying namespace '${namespace}'..."
        kubectl create namespace "${namespace}" --dry-run=client --output=yaml \
            | kubectl apply --server-side --filename -
    done
}

# Apply ConfigMaps
function apply_configmaps() {
    local -r configmaps=(
        "${KUBERNETES_DIR}/flux/components/common/cluster-settings.yaml"
    )

    for configmap in "${configmaps[@]}"; do
        if [ ! -f "${configmap}" ]; then
            log "ConfigMap file '${configmap}' not found. Skipping..."
            continue
        fi
        if kubectl --namespace flux-system diff --filename "${configmap}" &>/dev/null; then
            log "ConfigMap file '${configmap}' is up-to-date. Skipping..."
            continue
        fi
        log "Applying configMap file '${configmap}'..."
        kubectl --namespace flux-system apply --server-side --filename "${configmap}"
    done
}

# Apply Secrets
function apply_secrets() {
    local -r secrets=(
        "${KUBERNETES_DIR}/bootstrap/apps/resources/github-deploy-key.sops.yaml"
        "${KUBERNETES_DIR}/flux/components/common/cluster-secrets.sops.yaml"
        "${KUBERNETES_DIR}/flux/components/common/sops-age.sops.yaml"
    )

    for secret in "${secrets[@]}"; do
        if [ ! -f "${secret}" ]; then
            log "Secret file '${secret}' not found. Skipping..."
            continue
        fi
        if sops exec-file "${secret}" "kubectl --namespace flux-system diff --filename {}" &>/dev/null; then
            log "Secret file '${secret}' is up-to-date. Skipping..."
            continue
        fi
        log "Applying secret file '${secret}'..."
        sops exec-file "${secret}" "kubectl --namespace flux-system apply --server-side --filename {}"
    done
}

function main() {
    wait_for_nodes
    apply_prometheus_crds
    apply_namespaces
    apply_configmaps
    apply_secrets
}

main "$@"
